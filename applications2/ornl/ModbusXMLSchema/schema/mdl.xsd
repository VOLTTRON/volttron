<?xml version="1.0" encoding="US-ASCII"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
elementFormDefault="qualified" 
targetNamespace="http://www.ornl.gov/ModbusXMLSchema"
xmlns:mdl="http://www.ornl.gov/ModbusXMLSchema">


<!-- definition of device -->

<xs:element name="device">
	<xs:complexType>
		<xs:sequence>
			<xs:element name="name"                 type="mdl:name_type"         minOccurs="1"  maxOccurs="1" />
			<xs:element name="description"          type="mdl:description_type"  minOccurs="1"  maxOccurs="1" />
			<xs:group   ref="mdl:modbus_functions"                               minOccurs="0"  maxOccurs="1" />
		</xs:sequence>
	</xs:complexType>
</xs:element>


<!-- definition of a modbus function group -->

<xs:group name="modbus_functions">
	<xs:sequence>
		<xs:element name="function"  type="mdl:function_type" minOccurs="0"  maxOccurs="unbounded"/>
	</xs:sequence>
</xs:group>


<!-- definition of a function type -->

<xs:complexType  name="function_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>This element contains the description(s) of data item(s) by functionality of the device.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:sequence>
		<xs:element name="name"           type="mdl:name_type"          minOccurs="1"  maxOccurs="1"  />
		<xs:element name="description"    type="mdl:description_type"   minOccurs="1"  maxOccurs="1"  />
		<xs:element name="addresses"      type="mdl:address_list_type"  minOccurs="1"  maxOccurs="1"  />
		<xs:element name="length"         type="mdl:length_enum_type"   minOccurs="0"  maxOccurs="1"  default="Full word" />
		<xs:element name="count"          type="mdl:count_type"         minOccurs="0"  maxOccurs="1"  default="1" />
		<xs:element name="format"         type="mdl:format_enum_type"   minOccurs="0"  maxOccurs="1"  default="INT8" />
		<xs:element name="block_label"    type="mdl:block_label_type"   minOccurs="0"  maxOccurs="unbounded" />
		<xs:element name="multiplier"     type="mdl:multiplier_type"    minOccurs="0"  maxOccurs="1"  default="1.0" />
		<xs:element name="units"          type="mdl:units_type"         minOccurs="0"  maxOccurs="1"  />
		<xs:element name="read_function_code" type="mdl:read_function_type"      minOccurs="0"  maxOccurs="1"  />
		<xs:element name="write_function_code" type="mdl:write_function_type"    minOccurs="0"  maxOccurs="1"  />
	</xs:sequence>
</xs:complexType >


<!-- definition of data types -->

<xs:simpleType name="name_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>This is the name of the device or function, and it will be translated into the
		name of a class that reads from and writes to the device.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>

<xs:simpleType name="description_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>This is the description of the device or function, and it will be translated into the
		comments of a class and/or instructions for code that reads from and writes to the device.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>

<xs:simpleType name="address_list_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>A list of addresses for this register set.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:list itemType="xs:nonNegativeInteger"/>
</xs:simpleType>

<xs:simpleType name="length_enum_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>The length of each word that must be read to retrieve the data.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string">
		<xs:enumeration value="Lower byte"/>
		<xs:enumeration value="Upper byte"/>
		<xs:enumeration value="Full word"/>
	</xs:restriction>
</xs:simpleType>

<xs:simpleType name="count_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>The number of 16 bit words that must be read to retrieve	all of the data.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:positiveInteger"/>
</xs:simpleType>

<xs:simpleType name="format_enum_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>The name of Modbus value representation format that will be 
		translated to a C language primitive type that will hold the data 
		value in an application program.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string">
		<xs:enumeration value="INT8"/>
		<xs:enumeration value="UINT8"/>
		<xs:enumeration value="INT16"/>
		<xs:enumeration value="UINT16"/>
		<xs:enumeration value="INT32"/>
		<xs:enumeration value="UINT32"/>
	</xs:restriction>
</xs:simpleType>

<xs:simpleType name="block_label_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>The name of the Modbus block/label.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>

<xs:simpleType name="multiplier_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>Value of scaling multiplier.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:float"/>
</xs:simpleType>

<xs:simpleType name="units_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>The name of the output units.</p>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>

<xs:simpleType name="read_function_type">
	<xs:annotation>
		<xs:documentation xml:lang="en">
		<p>This is a fragment of C code that converts
		the register values into a data item that is
		useful to the application program. This fragment
		must be complete except for the definition 
		of the register variables and the return
		argument variable. The register variables are
		of type uint16_t and are named r1, r2, ....
		The return argument variable has the name arg.
		For example, the following divides register 
		number 1 by 10 and returns the result as a float.</p>
		<br><br>
			<verbatim>arg = (float)r1/10.0f;</verbatim>
		</br></br>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>

<xs:simpleType name="write_function_type">
    <xs:annotation>
		<xs:documentation xml:lang="en">
		<p>This is a fragment of C code that converts
		an application supplied argument to register values
		that can be written to the modbus device.
		This fragment must be complete except for the definition 
		of the register variables and the return
		argument variable. The register variables are
		of type uint16_t and are named r1, r2, ....
		The return argument variable has the name arg.
		For example, the following multiplies the application
		argument by 10 and the copies it to register 
		number 1.</p>
		<br><br>
			<verbatim>r1 = (uint16_t)(arg/10.0f);</verbatim>
		</br></br>
		</xs:documentation>
	</xs:annotation>
	<xs:restriction base="xs:string"/>
</xs:simpleType>


</xs:schema> 
