---
- import_playbook: includes/ensure_host_keys.yml

- hosts: all
  vars:
    # Ansible will use this path on remote hosts to run the interpreter with.
    ansible_python_interpreter: /usr/bin/python3
  environment:
    VOLTTRON_HOME: "{{ ansible_env.HOME }}/.volttron"
    VOLTTRON_ROOT: "{{ ansible_env.HOME }}/volttron"
    HOST_CONFIG: "{{ ansible_env.HOME }}/host.config.yml"
  tasks:

    - name: Initialize git variables for downloading repository without git
      set_fact:
        git_branch: remote-platforms
        git_organization: craig8

    - name: Test for enable_web
      when: enable_web is not defined
      set_fact:
        enable_web: "no"

    - name: Set messagebus zmq when not defined
      when: messagebus is not defined
      set_fact:
          messagebus: "zmq"

    - name: Install base software
      become: yes
      become_method: sudo
      apt:
        update_cache: yes
        name: "{{item}}"
        state: present
      loop:
          - "build-essential"
          - "git"
          - "python3.6-dev"
          - "python3-venv"
          - "libssl-dev"
          - "libevent-dev"

    - name: Installing extra system level things for rabbit.
      become: yes
      become_method: sudo
      when: messagebus == "rmq"
      apt:
        update_cache: yes
        name: "{{item}}"
        state: present
      loop:
          - "apt-transport-https"
          - "libwxbase3.0-0v5"
          - "libwxgtk3.0-0v5"
          - "libsctp1"

    - name: Adding apt_key for erlang solutions
      become: yes
      become_method: sudo
      when: messagebus == "rmq"
      apt_key:
        url: https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc
        state: present

    - name: Adding apt repo for erlang
      become: yes
      become_method: sudo
      when: messagebus == "rmq"
      apt_repository:
        update_cache: yes
        repo: deb https://packages.erlang-solutions.com/ubuntu bionic contrib
        state: present
        filename: erlang.solutions.list

    - name: Install erlang requirements
      become: yes
      become_method: sudo
      when: messagebus == "rmq"
      apt:
        update_cache: yes
        name: "{{item}}"
        state: present
      loop:
        - "erlang-base"
        - "erlang-diameter"
        - "erlang-eldap"
        - "erlang-ssl"
        - "erlang-crypto"
        - "erlang-asn1"
        - "erlang-public-key"
        - "erlang-nox"

    - name: Download repository
      get_url:
        url: https://github.com/{{ git_organization }}/volttron/archive/{{ git_branch }}.tar.gz
        dest: "/tmp/volttron.tar.gz"
        force: yes

    - name: Stat volttron dir
      stat:
        path: "{{ ansible_env.HOME }}/volttron"
      register: volttron_path_stat

    - name: Stat tar file
      stat:
        path: "/tmp/volttron.tar.gz"
        get_checksum: yes
      register: new_tar_stat

    - name: Stat old tar
      stat:
        path: "{{ ansible_env.HOME }}/volttron.tar.gz"
        get_checksum: yes
      register: old_tar_stat

    - name: Should reset
      set_fact:
        redo_volttron: "{{ (not volttron_path_stat.stat.exists or not old_tar_stat.stat.exists or (new_tar_stat.stat.checksum != old_tar_stat.stat.checksum)) }}"

    - name: Move new file
      command: mv "/tmp/volttron.tar.gz" "{{ ansible_env.HOME }}/volttron.tar.gz"
      when: redo_volttron

    - name: Remove volttron dir if exists
      command: rm -rf {{ ansible_env.HOME }}/volttron
      when: redo_volttron

    - name: Extract archive
      unarchive:
        src: "{{ ansible_env.HOME }}/volttron.tar.gz"
        dest: "{{ ansible_env.HOME }}"
        remote_src: yes
      when: redo_volttron

    - name: rename folder
      command: mv "{{ ansible_env.HOME }}/volttron-{{git_branch}}" "{{ansible_env.HOME }}/volttron"
      when: redo_volttron

    - name: Bootstrap the python3 environment
      command:
        cmd: "python3 bootstrap.py"
        chdir: "{{ ansible_env.HOME }}/volttron"
        creates: "{{ ansible_env.HOME }}/volttron/env"

    - name: Test if pika installed
      raw: "cd ~/volttron && env/bin/pip list --disable-pip-version-check --format legacy| grep -F gevent-pika | wc -l"
      args:
        chdir: "{{ ansible_env.HOME }}/volttron"
      register: already_installed_pika

    - name: Boostrap rmq environment
      when: (messagebus == "rmq" and "0" in already_installed_pika.stdout)
      command:
        cmd: "env/bin/python bootstrap.py --rabbitmq"
        chdir: "{{ ansible_env.HOME }}/volttron"

    - name: Test if pika installed
      raw: "cd {{ ansible_env.HOME }}/volttron && env/bin/pip list --disable-pip-version-check --format legacy| grep -F ws4py | wc -l"
      args:
        chdir: "{{ ansible_env.HOME }}/volttron"
      register: web_enabled

    - name: Enabling web packages for environment
      when: (enable_web == 'yes' and "0" in web_enabled.stdout)
      command:
        cmd: "env/bin/python bootstrap.py --web"
        chdir: "{{ ansible_env.HOME }}/volttron"

    - set_fact:
        local_remote_config_file: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/{{inventory_hostname}}.yml"
        local_configs_dir: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/configs"
        python3: "{{lookup('env','DEPLOYMENT_ROOT')}}/env/bin/python"

    - include_tasks: includes/ansible_venv.yml
    - include_tasks: includes/copy_configs.yml

    - name: "Create custom fact directory"
      become: True
      become_method: sudo
      file:
        owner: "{{ ansible_user }}"
        recurse: yes
        path: "/etc/ansible/facts.d"
        state: "directory"

    - include_tasks: includes/update_facts.yml
      vars:
        host_config: "{{ ansible_env.HOME }}/host.config.yml"
