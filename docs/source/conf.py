# -*- coding: utf-8 -*-
#
# VOLTTRON documentation build configuration file, created by
# sphinx-quickstart on Thu Feb  4 21:15:08 2016.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.
import subprocess
import sys
import os
from glob import glob
from mock import Mock as MagicMock

class Mock(MagicMock):
    @classmethod
    def __getattr__(cls, name):
            return Mock()


MOCK_MODULES = ['loadshape', 'numpy', 'sympy', 'xlrd','stomp','oadr2',
                'pyodbc', 'lxml', 'stomp.listener',
                'sympy.parsing', 'sympy.parsing.sympy_parser','pytest']
sys.modules.update((mod_name, Mock()) for mod_name in MOCK_MODULES)


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.viewcode',
    'sphinx.ext.intersphinx',
]

#External python documentation for referencing.
intersphinx_mapping = {'python': ('https://docs.python.org/2.7', None)}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'VOLTTRON'
copyright = u'2016, 2016, Battelle Memorial Institute'
author = u'The VOLTTRON Developer Team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = u'3.5'
# The full version, including alpha/beta/rc tags.
release = u'3.5RC1'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["unused"]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#html_theme = 'alabaster'
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []
html_theme_path = ["_themes",]

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'hu', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'ru', 'sv', 'tr'
#html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
#html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
#html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = 'VOLTTRONdoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',

# Latex figure (float) alignment
#'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'VOLTTRON.tex', u'VOLTTRON Documentation',
     u'The VOLTTRON Developer Team', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'volttron', u'VOLTTRON Documentation',
     [author], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'VOLTTRON', u'VOLTTRON Documentation',
     author, 'VOLTTRON', 'One line description of project.',
     'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# Custom event handlers for Volttron #
def setup(app):
    """
    Registers callback method on sphinx events. callback method used to
    dynamically generate api-docs rst files which are then converted to html
    by readthedocs
    :param app:
    """
    app.connect('builder-inited', generate_apidoc)
    app.connect('build-finished', clean_apirst)



script_dir = os.path.dirname(os.path.realpath(__file__))
apidocs_base_dir =os.path.abspath(script_dir + "/apidocs")
def generate_apidoc(app):
    """
        Generates apidocs for modules under volttron/platform,
        volttron/services/core, and volttron/applications
        :param app:
        :return:
        """
    print("\n##In run_apidocs##\n")
    global script_dir, apidocs_base_dir

    os.makedirs(apidocs_base_dir, 0755)
    file_name = os.path.join(script_dir,"../docs_exclude_list.txt" )
    application_excludes = []
    services_excludes = []
    volttron_excludes = []
    examples_excludes = []
    if os.path.exists(file_name):
        print "file_name {} exists".format(file_name)
        with open(file_name,'r') as file:
            for line in file:
                print "line is {}".format(line)
                if line.startswith('applications'):
                    _add_to_excludes(application_excludes, line)
                elif line.startswith('services'):
                    _add_to_excludes(services_excludes, line)
                elif line.startswith('volttron'):
                    _add_to_excludes(volttron_excludes, line)
                elif line.startswith('examples'):
                    _add_to_excludes(examples_excludes, line)
    print ("processed exclude list")
    print ("services {}".format(services_excludes))
    print ("applications {}".format(application_excludes))
    print ("applications {}".format(volttron_excludes))

    # generate api-docs for  services/core
    docs_subdir=os.path.join(apidocs_base_dir, "services")
    agent_dirs = glob(script_dir+"/../../services/core/*/")
    run_apidoc(docs_subdir, agent_dirs, services_excludes)

    # generate api-docs for examples
    docs_subdir = os.path.join(apidocs_base_dir, "examples")
    agent_dirs = glob(script_dir + "/../../examples/*/")
    run_apidoc(docs_subdir, agent_dirs, examples_excludes)

    # generate api-docs for applications
    docs_subdir = os.path.join(apidocs_base_dir, "applications")
    agent_dirs = glob(script_dir + "/../../applications/*/*/")
    run_apidoc(docs_subdir, agent_dirs, application_excludes)

    # generate api-docs for platform core and drivers

    sys.path.insert(0,
                    os.path.abspath(script_dir + "/../../volttron"))
    print("Added to sys path***: {}".format(os.path.abspath(script_dir + "/../..")))

    cmd = ["sphinx-apidoc", '-o', os.path.join(apidocs_base_dir, "volttron"),
           script_dir + "/../../volttron", '--force']
    cmd.extend(volttron_excludes)
    subprocess.check_call(cmd)


def _add_to_excludes(application_excludes, line):
    global script_dir
    volttron_root = os.path.abspath(os.path.join(script_dir, "../.."))
    application_excludes.append(os.path.join(volttron_root, line))


def run_apidoc(docs_dir, agent_dirs, exclude_list):
    """
    Runs sphinx-apidoc on all subdirectories under the given directory.
    commnad runs with --force and exclude any setup.py file in the subdirectory
    :param docs_dir: The base directory into with .rst files are generated.
    :param module_services_path: directory to search for packages to document
    """

    for agent_dir in agent_dirs:
        agent_dir = os.path.abspath(agent_dir)
        agent_dir = agent_dir[:-1] if agent_dir.endswith("/") else agent_dir
        sys.path.insert(0, agent_dir)
        print "Added to syspath {}".format(agent_dir)
        name = os.path.basename(agent_dir)
        cmd = ["sphinx-apidoc", '-o',
             os.path.join(docs_dir, name),
             agent_dir, os.path.join(agent_dir, "setup.py"),
             '--force']
        cmd.extend(exclude_list)
        subprocess.check_call(cmd)


def clean_apirst(app, exception):
    """
    Deletes folder containing all auto generated .rst files at the end of
    sphinx build immaterial of the exit state of sphinx build.
    :param app:
    :param exception:
    """
    global apidocs_base_dir
    import shutil
    print("Cleanup: Removing apidocs directory {}".format(apidocs_base_dir))
    shutil.rmtree(apidocs_base_dir)
